import csv
from ROOT import TFile
from glob import glob
from math import sqrt
from sys import argv


def main(files, outfile_name="plotoutput.txt", in_time_bx=4): #args becomes files

    # Output csv file
    outputfile = open(outfile_name, 'w')  #open outfile_name in write mode (erases existing content)
    outputwriter = csv.writer(outputfile)

    # Logging information headers used for writing to output file
    param_names = ["nEvents", "pulse_shift", "pileup_shift", "nSmpl", "nFreq",
                   "amplitudeTruth", "nPU", "sigmaNoise", "puFactor",
                   "pulse_tau", "WFNAME", "in_time_bx"]
    reco_stat_names  = ["avg_reco_amplitude", "sigma_eff", "sigma_eff_err"]
    outputwriter.writerow(param_names + reco_stat_names)

    # Accessing each file and making the histograms
    print "\nProcessing %d file(s)\n" % len(files)
    for i, f in enumerate(files):

        # Accessing the file
        print "File", i+1, ":", f
        in_file = TFile(f, "Read")
        tree = in_file.Get("RecoAndSim")
        nEvents = tree.GetEntries()

        # Getting the params for the file
        tree.GetEntry(0)
        params = [nEvents, tree.pulse_shift, tree.pileup_shift,
                  tree.nSmpl, tree.nFreq, tree.amplitudeTruth,
                  tree.nPU, tree.sigmaNoise, tree.puFactor,
                  tree.pulse_tau, tree.WFNAME, in_time_bx]

        for name, value in zip(param_names, params):
          print '{0:>17}: {1:>5}'.format(name, value)

        # Getting the reconstructed amplitudes
        reco_list = []
        for event in range(nEvents):
            tree.GetEntry(event)
            reco_list.append(tree.samplesReco.at(in_time_bx))

        # calculate uncertainty
        reco_stats = mean_sigma_eff(reco_list)

        for name, value in zip(reco_stat_names, reco_stats):
            print '{0:>17}: {1:>11}'.format(name, value)

        outputwriter.writerow(params + reco_stats)

        in_file.Close()

    outputfile.close()


if __name__ == "__main__":
    
    args = [] #Creating a list
    # for loop that converts arguments with a '*' to the corresponding files
    for arg in argv[1:]:  #For arguments argv[1] and following
        args += glob(arg) #Search for and add all * files to args
    main(args)
